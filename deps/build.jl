using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libbtf"], :libbtf),
    LibraryProduct(prefix, String["libsundials_sunlinsolspfgmr"], :libsundials_sunlinsolspfgmr),
    LibraryProduct(prefix, String["libsundials_ida"], :libsundials_ida),
    LibraryProduct(prefix, String["libsundials_cvode"], :libsundials_cvode),
    LibraryProduct(prefix, String["libsundials_cvodes"], :libsundials_cvodes),
    LibraryProduct(prefix, String["libcolamd"], :libcolamd),
    LibraryProduct(prefix, String["libsundials_sunmatrixdense"], :libsundials_sunmatrixdense),
    LibraryProduct(prefix, String["libsundials_sunlinsolspbcgs"], :libsundials_sunlinsolspbcgs),
    LibraryProduct(prefix, String["libsundials_idas"], :libsundials_idas),
    LibraryProduct(prefix, String["libsundials_nvecserial"], :libsundials_nvecserial),
    LibraryProduct(prefix, String["libsundials_sunlinsoldense"], :libsundials_sunlinsoldense),
    LibraryProduct(prefix, String["libsundials_sunlinsolspgmr"], :libsundials_sunlinsolspgmr),
    LibraryProduct(prefix, String["libsundials_sunlinsolpcg"], :libsundials_sunlinsolpcg),
    LibraryProduct(prefix, String["libsundials_sunlinsolsptfqmr"], :libsundials_sunlinsolsptfqmr),
    LibraryProduct(prefix, String["libsundials_sunlinsolklu"], :libsundials_sunlinsolklu),
    LibraryProduct(prefix, String["libsundials_sunmatrixsparse"], :libsundials_sunmatrixsparse),
    LibraryProduct(prefix, String["libsundials_sunlinsolband"], :libsundials_sunlinsolband),
    LibraryProduct(prefix, String["libsundials_sunmatrixband"], :libsundials_sunmatrixband),
    LibraryProduct(prefix, String["libsundials_kinsol"], :libsundials_kinsol),
    LibraryProduct(prefix, String["libsundials_arkode"], :libsundials_arkode),
    LibraryProduct(prefix, String["libklu"], :libklu),
    LibraryProduct(prefix, String["libsuitesparseconfig"], :libsuitesparseconfig),
    LibraryProduct(prefix, String["libamd"], :libamd),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaDiffEq/SundialsBuilder/releases/download/sundials-3.1.1.6"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Sundials.v1.0.0.aarch64-linux-gnu.tar.gz", "a6aa267b1ed7000641d2d963d459e8529e0763806c018a1cd9dfb135e7d37d68"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Sundials.v1.0.0.arm-linux-gnueabihf.tar.gz", "f6056b64669f9a6973ebc43764294280c102d59d317e366129ec2444e3358813"),
    Linux(:i686, :glibc) => ("$bin_prefix/Sundials.v1.0.0.i686-linux-gnu.tar.gz", "d951f0c87653154602c20330fc9b5fdde652c02044d0eb42f4b1a9a29f99d189"),
    Windows(:i686) => ("$bin_prefix/Sundials.v1.0.0.i686-w64-mingw32.tar.gz", "7cca8d82ddb311bcf3ab96b5e52cbd468dbdf5d5400bfb01efee036bbbceea12"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Sundials.v1.0.0.powerpc64le-linux-gnu.tar.gz", "6be347768267f743212589075a272a12e273f34a813a9e12ab8063b2427d099e"),
    MacOS(:x86_64) => ("$bin_prefix/Sundials.v1.0.0.x86_64-apple-darwin14.tar.gz", "fa6fa87c4b805096291946aff3bc1cf2026c2422fd6ebc593612134d05a3811c"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Sundials.v1.0.0.x86_64-linux-gnu.tar.gz", "9da6d308f6f63177e0a37b7a3e000c53cff1e4dcc5dc551bb013bd59b922c411"),
    Windows(:x86_64) => ("$bin_prefix/Sundials.v1.0.0.x86_64-w64-mingw32.tar.gz", "5c5858a0986cfd5a6ced7aae67e01cdfb6373677f7c40bd2c2b64252cbf5aef3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
